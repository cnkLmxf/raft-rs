syntax = "proto3";
package eraftpb;

enum EntryType {
    EntryNormal = 0;
    EntryConfChange = 1;
}

// The entry is a type of change that needs to be applied. It contains two data fields.
// While the fields are built into the model; their usage is determined by the entry_type.
//entry是一种需要apply的更改类型。 它包含两个数据字段。 虽然字段已内置到模型中； 它们的用法由entry_type决定。
//
// For normal entries, the data field should contain the data change that should be applied.
// The context field can be used for any contextual data that might be relevant to the
// application of the data.
//对于普通entry，数据字段应包含应该被apply的数据更改。 上下文字段可以用于可能与数据的应用相关的任何上下文数据。
//
// For configuration changes, the data will contain the ConfChange message and the
// context will provide anything needed to assist the configuration change. The context
// if for the user to set and use in this case.
//对于配置更改，数据将包含ConfChange消息，并且上下文将提供协助配置更改所需的任何内容。 在这种情况下，供用户设置和使用的上下文。
message Entry {
    EntryType entry_type = 1;
    uint64 term = 2;
    uint64 index = 3;
    bytes data = 4;
    bytes context = 6;

    // Deprecated! It is kept for backward compatibility.
    //不推荐使用！ 保留它是为了向后兼容。
    // TODO: remove it in the next major release.
    bool sync_log = 5;
}

message SnapshotMetadata {
    ConfState conf_state = 1;
    ConfState pending_membership_change = 4;
    uint64 pending_membership_change_index = 5;
    uint64 index = 2;
    uint64 term = 3;
}

message Snapshot {
    bytes data = 1;
    SnapshotMetadata metadata = 2;
}

enum MessageType {
    MsgHup = 0;
    MsgBeat = 1;
    MsgPropose = 2;
    MsgAppend = 3;
    MsgAppendResponse = 4;
    MsgRequestVote = 5;
    MsgRequestVoteResponse = 6;
    MsgSnapshot = 7;
    MsgHeartbeat = 8;
    MsgHeartbeatResponse = 9;
    MsgUnreachable = 10;
    MsgSnapStatus = 11;
    MsgCheckQuorum = 12;
    MsgTransferLeader = 13;
    MsgTimeoutNow = 14;
    MsgReadIndex = 15;
    MsgReadIndexResp = 16;
    MsgRequestPreVote = 17;
    MsgRequestPreVoteResponse = 18;
}

message Message {
    MessageType msg_type = 1;
    uint64 to = 2;
    uint64 from = 3;
    uint64 term = 4;
    uint64 log_term = 5;
    uint64 index = 6;
    repeated Entry entries = 7;
    uint64 commit = 8;
    Snapshot snapshot = 9;
    bool reject = 10;
    uint64 reject_hint = 11;
    bytes context = 12;
}

message HardState {
    uint64 term = 1;
    uint64 vote = 2;
    uint64 commit = 3;
}

message ConfState {
    repeated uint64 nodes = 1;
    repeated uint64 learners = 2;
}

enum ConfChangeType {
    AddNode    = 0;
    RemoveNode = 1;
    AddLearnerNode = 2;
    BeginMembershipChange = 3;
    FinalizeMembershipChange = 4;
}

message ConfChange {
    uint64 id = 1;
    ConfChangeType change_type = 2;
    // Used in `AddNode`, `RemoveNode`, and `AddLearnerNode`.
    //用于`AddNode`，`RemoveNode`和`AddLearnerNode`。
    uint64 node_id = 3;
    bytes context = 4;
    // Used in `BeginMembershipChange` and `FinalizeMembershipChange`.
    //用于`BeginMembershipChange`和`FinalizeMembershipChange`中。
    ConfState configuration = 5;
    // Used in `BeginMembershipChange` and `FinalizeMembershipChange`.
    // Because `RawNode::apply_conf_change` takes a `ConfChange` instead of an `Entry` we must
    // include this index so it can be known.
    //用于`BeginMembershipChange`和`FinalizeMembershipChange`中。
    //因为`RawNode::apply_conf_change`接受`ConfChange`而不是`Entry`，所以我们必须包括该索引，这样它才能被知道。
    uint64 start_index = 6;
}
